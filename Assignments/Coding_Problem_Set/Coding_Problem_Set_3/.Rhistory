j= 3
dhyper(j,nsucess,nfailures,n)
choose(4,3)*choose(48,37)/choose(52,40)
sum(dhyper(1:4,nsucess,nfailures,n))
phyper(3,nsucess,nfailures,n)
rhyper(10,nsucess,nfailures,n)
#airport problem
r=20
p=0.2
j=20
dnbinom(j-r,r,p)
library(ggplot2)
r = 20
p = 0.2
j = c(20:200)
which.max(probabilities)
df = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
plt
r=1
p=1/6
j=c(1:200)
df = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
r=1
p=1/6
j=c(1:200)
df = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
r=1
p=1/6
j=c(1:200)
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
r=1
p=1/6
j=c(1:10)
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
r=10
p=1/6
j=c(10:100)
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
r=10
p=1/6
j=c(10:100)
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt
r=10
p=1/6
j=c(10:100)
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt1
r=10
p= 0.16
j=c(10:100)
dnbinom(j-r,r,p)
#df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
#colnames(df1)= c('J','Probabilities')
#plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
#plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p)
#df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
#colnames(df1)= c('J','Probabilities')
#plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
#plt1
r=10
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
#df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
#colnames(df1)= c('J','Probabilities')
#plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
#plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
#colnames(df1)= c('J','Probabilities')
#plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
#plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
#plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
#plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
#plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt1 = ggplot(data = df) + geom_col(aes(x=j, y = probabilities))
plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt1 = ggplot(data = df1) + geom_col(aes(x=j, y = probabilities))
plt1
r=10
p= 0.16
j=c(10:100)
cbind(j,dnbinom(j-r,r,p))
df1 = as.data.frame(cbind(j,dnbinom(j-r,r,p)))
colnames(df1)= c('J','Probabilities')
plt1 = ggplot(data = df1) + geom_col(aes(x=j, y = probabilities))
plt1
r=6
p=0.5
j = c(1:100)
dnbinom(j-r,r,p)
r=6
p=0.5
j = c(1:100)
dnbinom(j-r,r,p)
which.max(dnbinom(j-r,r,p))
library(ggplot2)
timing_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
getwd()
setwd("D:/ME/ME_1st_Sem/AML_5103_AppliedProbabilityAndStatistics/Assignments/Coding_Problem_Set/Coding_Problem_Set_3")
timing_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
timing_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
combined_data <- rbind(data.frame(User = "A", Time = timing_A$V1),
data.frame(User = "B", Time = timing_B$V1))
# Plot density histograms
ggplot(combined_data, aes(x = Time, fill = User)) +
geom_density(alpha = 0.5) +
xlab("Time (milliseconds)") +
ylab("Density") +
ggtitle("Density Histograms for Users A and B") +
theme_minimal()
timing_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
timing_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
print(timing_A)
print(timing_B)
print(timing_A)
View(timing_A)
View(combined_data)
params_A <- fitdistr(timing_A$V1, densfun = "normal")$estimate
install.packages("MASS")
params_A <- fitdistr(timing_A$V1, densfun = "normal")$estimate
install.packages("MASS")
params_A <- fitdistr(timing_A$V1, densfun = "normal")$estimate
library(ggplot2)
library(MASS)
timing_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
timing_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
combined_data <- rbind(data.frame(User = "A", Time = timing_A$V1),
data.frame(User = "B", Time = timing_B$V1))
# Plot density histograms
ggplot(combined_data, aes(x = Time, fill = User)) +
geom_density(alpha = 0.5) +
xlab("Time (milliseconds)") +
ylab("Density") +
ggtitle("Density Histograms for Users A and B") +
theme_minimal()
params_A <- fitdistr(timing_A$V1, densfun = "normal")$estimate
params_B <- fitdistr(timing_B$V1, densfun = "normal")$estimate
params_A
cat("User A parameters:", params_A, "\n")
cat("User B parameters:", params_B, "\n")
timing_unknown <- read.table("email.txt", header = FALSE, sep = ",")
View(timing_unknown)
likelihood_A <- prod(dnorm(timing_unknown$V1, mean = params_A[1], sd = params_A[2]))
likelihood_B <- prod(dnorm(timing_unknown$V1, mean = params_B[1], sd = params_B[2]))
likelihood_ratio <- likelihood_A / likelihood_B
cat("Likelihood ratio (A/B):", likelihood_ratio, "\n")
likelihood_A <- (dnorm(timing_unknown$V1, mean = params_A[1], sd = params_A[2]))
likelihood_B <- (dnorm(timing_unknown$V1, mean = params_B[1], sd = params_B[2]))
likelihood_ratio <- likelihood_A / likelihood_B
cat("Likelihood ratio (A/B):", likelihood_ratio, "\n")
likelihood_A <- mean(dnorm(timing_unknown$V1, mean = params_A[1], sd = params_A[2]))
likelihood_B <- mean(dnorm(timing_unknown$V1, mean = params_B[1], sd = params_B[2]))
likelihood_ratio <- likelihood_A / likelihood_B
cat("Likelihood ratio (A/B):", likelihood_ratio, "\n")
# Loading required libraries
library(ggplot2)
# First, read the data from text files
keyTimingA <- read.table("personKeyTimingA.txt", header=TRUE)
keyTimingB <- read.table("personKeyTimingB.txt", header=TRUE)
email <- read.table("email.txt", header=TRUE)
# Convert timing data to millisecond durations since start
keyTimingA$time <- keyTimingA$time / 1000
# Loading required libraries
library(ggplot2)
# First, read the data from text files
keyTimingA <- read.table("personKeyTimingA.txt", header=TRUE)
keyTimingB <- read.table("personKeyTimingB.txt", header=TRUE)
email <- read.table("email.txt", header=TRUE)
# Convert timing data to millisecond durations since start
keyTimingA$time <- keyTimingA$time / 1000
# Loading required libraries
library(ggplot2)
# First, read the data from text files
keyTimingA <- read.table("personKeyTimingA.txt", header=TRUE)
keyTimingB <- read.table("personKeyTimingB.txt", header=TRUE)
email <- read.table("email.txt", header=TRUE)
# Convert timing data to millisecond durations since start
keyTimingA <- keyTimingA$time / 1000
keyTimingB <- keyTimingB$time / 1000
email <- email$time / 1000
# Part (a): Plotting the density histograms for both users
ggplot(keyTimingA, aes(time)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5, colour = "black", fill = "white") +
geom_density(alpha = .5, fill="#FF6666") +
xlab("Keystroke Time (ms)") + ylab("Density") +
ggtitle("User A Keystroke Time Density Histogram")
# Load required packages
library(ggplot2)
library(kernsmooth)
install.packages("KernSmooth")
# Load required packages
library(ggplot2)
library(kernsmooth)
install.packages("KernSmooth")
install.packages("KernSmooth")
# Load required packages
library(ggplot2)
library(kernsmooth)
# Load required packages
# Load required packages
library(ggplot2)
# Read the keystroke timing information
personA <- read.table("personKeyTimingA.txt", header=FALSE)
personB <- read.table("personKeyTimingB.txt", header=FALSE)
unknownUser <- read.table("email.txt", header=FALSE)
# Plot density histograms for the keystroke times for users A and B
ggplot() +
geom_density(aes(x=personA$V1), fill="blue", alpha=0.5) +
geom_density(aes(x=personB$V1), fill="red", alpha=0.5) +
labs(title="Density Histogram of Keystroke Times for Users A and B", x="Keystroke Time (ms)", y="Density") +
theme_minimal()
# Model random variables TA and TB using appropriate distributions (e.g., normal distribution)
densityA <- density(personA$V1)
# Load required packages
# Load required packages
library(ggplot2)
# Read the keystroke timing information
personA <- read.table("personKeyTimingA.txt", header=FALSE)
personB <- read.table("personKeyTimingB.txt", header=FALSE)
unknownUser <- read.table("email.txt", header=FALSE)
# Plot density histograms for the keystroke times for users A and B
p = ggplot() +
geom_density(aes(x=personA$V1), fill="blue", alpha=0.5) +
geom_density(aes(x=personB$V1), fill="red", alpha=0.5) +
labs(title="Density Histogram of Keystroke Times for Users A and B", x="Keystroke Time (ms)", y="Density") +
theme_minimal()
p
# Model random variables TA and TB using appropriate distributions (e.g., normal distribution)
densityA <- density(personA$V1)
# Plot density histograms for the keystroke times for users A and B
p = ggplot() +
geom_density(aes(x=personA$V1), fill="blue", alpha=0.5) +
geom_density(aes(x=personB$V1), fill="red", alpha=0.5) +
labs(title="Density Histogram of Keystroke Times for Users A and B", x="Keystroke Time (ms)", y="Density") +
theme_minimal()
p
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
# Load required packages
library(ggplot2)
# Read the keystroke timing information
personA <- read.table("personKeyTimingA.txt", header=FALSE)
personB <- read.table("personKeyTimingB.txt", header=FALSE)
unknownUser <- read.table("email.txt", header=FALSE)
View(AxisSecondary)
# Load necessary libraries
library(ggplot2)
library(extraDistr)
install.packages("extraDistr")
# Load necessary libraries
library(ggplot2)
library(extraDistr)
# Load the data
data_A <- read.table("personKeyTimingA.txt", header = FALSE)
data_B <- read.table("personKeyTimingB.txt", header = FALSE)
data_email <- read.table("email.txt", header = FALSE)
# Plot the density histograms for the keystroke times for users A and B
ggplot(data_A, aes(x=data_A$V1)) +
geom_density() +
ggtitle("Keystroke Timing Density Histogram for User A")
ggplot(data_B, aes(x=data_B$V1)) +
geom_density() +
ggtitle("Keystroke Timing Density Histogram for User B")
# Fits a gamma distribution to the data
fit_A <- fitdist(data_A$V1, "gamma")
# Load necessary libraries
library(ggplot2)
library(extraDistr)
# Load the data
data_A <- read.table("personKeyTimingA.txt", header = FALSE)
data_B <- read.table("personKeyTimingB.txt", header = FALSE)
data_email <- read.table("email.txt", header = FALSE)
View(data_A)
View(combined_data)
View(data_email)
# Install required libraries
install.packages(c("ggplot2"))
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- # Read the timing from 'email.txt' or provide a value
# Calculate likelihood ratios
likelihood_ratio_A <- dnorm(time_email, mean = mu_A, sd = sigma_A)
install.packages(c("ggplot2"))
install.packages(c("ggplot2"))
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- # Read the timing from 'email.txt' or provide a value
# Calculate likelihood ratios
likelihood_ratio_A <- dnorm(time_email, mean = mu_A, sd = sigma_A)
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- read.table("email.txt", header = FALSE, sep = ",")
# Calculate likelihood ratios
likelihood_ratio_A <- dnorm(time_email, mean = mu_A, sd = sigma_A)
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- as.numeric(read.table("email.txt", header = FALSE, sep = ","))
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- as.numeric(read.table("email.txt", header = FALSE, sep = ",")$V1)
# Calculate likelihood ratios
likelihood_ratio_A <- dnorm(time_email, mean = mu_A, sd = sigma_A)
likelihood_ratio_B <- dnorm(time_email, mean = mu_B, sd = sigma_B)
# Calculate the final likelihood ratio
final_likelihood_ratio <- likelihood_ratio_A / likelihood_ratio_B
# Print the result
cat("Likelihood Ratio (A:B) =", final_likelihood_ratio, "\n")
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- as.numeric(read.table("email.txt", header = FALSE, sep = ",")$V1)
# Calculate likelihood ratios
likelihood_ratio_A <- dnorm(time_email, mean = mu_A, sd = sigma_A)
likelihood_ratio_B <- dnorm(time_email, mean = mu_B, sd = sigma_B)
# Calculate the final likelihood ratio
final_likelihood_ratio <- likelihood_ratio_A / likelihood_ratio_B
product_likelihood_ratio <- prod(final_likelihood_ratio)
# Print the result
cat("Likelihood Ratio (A:B) =", product_likelihood_ratio, "\n")
# Load libraries
library(ggplot2)
# Load keystroke timing data for users A and B
data_A <- read.table("personKeyTimingA.txt", header = FALSE, sep = ",")
data_B <- read.table("personKeyTimingB.txt", header = FALSE, sep = ",")
# Plot density histograms
ggplot() +
geom_density(aes(x = data_A$V1), fill = "blue", alpha = 0.5, label = "User A") +
geom_density(aes(x = data_B$V1), fill = "red", alpha = 0.5, label = "User B") +
labs(title = "Density Histograms of Keystroke Times",
x = "Time (milliseconds)",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Fit Gaussian distribution to the data
mu_A <- mean(data_A$V1)
sigma_A <- sd(data_A$V1)
mu_B <- mean(data_B$V1)
sigma_B <- sd(data_B$V1)
# Assuming the unknown user's timing from 'email.txt' is stored in a variable called 'time_email'
time_email <- as.numeric(read.table("email.txt", header = FALSE, sep = ",")$V1)
# Calculate likelihood ratios
likelihood_ratio_A <- dnorm(time_email, mean = mu_A, sd = sigma_A)
likelihood_ratio_B <- dnorm(time_email, mean = mu_B, sd = sigma_B)
# Calculate the final likelihood ratio
final_likelihood_ratio <- likelihood_ratio_A / likelihood_ratio_B
# Print the result
cat("Likelihood Ratio (A:B) =", mean(final_likelihood_ratio), "\n")
source("~/.active-rstudio-document", echo=TRUE)
